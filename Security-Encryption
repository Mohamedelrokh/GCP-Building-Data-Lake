#There are 3 types of encryption keys in GCP


                                                               # A-  Google managed encryption key

#it is the default key in GCP , It needs no configurations

# we gonna explore it now
# 1. Set Parameters
REGION=us
BUCKET=bucket-100-rokh

# 2. Create the Bucket
gsutil mb -l $REGION gs://$BUCKET/

# 3. Check the encyption type
# go to configursation tab and u will find google managed in encyption type 

# 4. upload image to the bucket 
curl https://abs.twimg.com/icons/apple-touch-icon-192x192.png | gsutil cp - gs://$BUCKET/image.jpg
#the encryption for this image will be google managed as it inherits it for the parent bucket.

# 5. Remove the Bucket and Its Contents
gsutil rm -r gs://$BUCKET/



                                                               # B- customer managed encrytpion key

# U can use KMS (Key Management Service) to rovide the encryption keys for buckets

# 1. Enable the KMS api in yr project 
gcloud services enable cloudkms.googleapis.com

# 2. Creating Keyring
#Keyring is used to group the keys (test keys , dev keys and so) 
#Keyring is associated with certian project

KEY_RING=my-key-ring
LOCATION=us
PROJECT_ID=$(gcloud config get-value project)

gcloud kms keyrings create $KEY_RING \
    --location $LOCATION \
    --project $PROJECT_ID


# 3 . Create Key in the keyring
KEY_NAME=poc-key  
gcloud kms keys create $KEY_NAME \
    --keyring $KEY_RING \
    --location $LOCATION \
    --purpose encryption \
    --project $PROJECT_ID




# 4. create a bucket and specifiy the key for encryption
BUCKET=my-encrypted-bucket-100
gsutil mb -l $LOCATION \
    -p $PROJECT_ID \
    -k projects/$PROJECT_ID/locations/$LOCATION/keyRings/$KEY_RING/cryptoKeys/$KEY_NAME \
    gs://$BUCKET/


# 5. check the key for encryption for this bucket 
gcloud storage buckets describe gs://$BUCKET --format="json"

# the output for the encrytion part  "default_kms_key": "projects/project_name/locations/us/keyRings/my-key-ring/cryptoKeys/poc-key"

#if u encounter any error regarding that  your Cloud Storage service account has no permission to use br Cloud KMS keys run the following command:
gsutil kms authorize -p $PROJECT_ID -k \
projects/$PROJECT_ID/locations/us/keyRings\
/$KEY_RING/cryptoKeys/$KEY_NAME



# 6. Upload an Image to the Bucket
curl https://abs.twimg.com/icons/apple-touch-icon-192x192.png | gsutil cp - gs://$BUCKET/image.jpg
# the image will inherit the default encryption key set for its parent bucket 

# 7. Encrypt individual objects with a different Cloud KMS key from the defulat key
# if you want to use a different key from the default key set on the bucket, or if you don't have a default key set on the bucket. 
#  . Create a second Key in the keyring
KEY_NAME2=poc-key2
gcloud kms keys create $KEY_NAME2 \
    --keyring $KEY_RING \
    --location $LOCATION \
    --purpose encryption \
    --project $PROJECT_ID

# downloading the image
curl https://abs.twimg.com/icons/apple-touch-icon-192x192.png -o image.png 

#uplaoding the image with providing the path to the second key (not the defualt one) 
gcloud storage cp image.png gs://$BUCKET/image2.jpg     --encryption-key=projects/$PROJECT_ID/locatio
ns/$LOCATION/keyRings/$KEY_RING/cryptoKeys/$KEY_NAME2



8. Perform key rotation
# key rotation is triggered by generating a new version of a key, and marking that version as the primary version. 
# After rotating a key, its previous key versions (which no longer are primary) are neither disabled or destroyed, and remain available for decrypting data.
# By providing a rotation schedule, Cloud KMS will automatically rotate your keys for you.

# In the Cloud Console, go to Navigation menu > Security > Key Management and click on the KeyRing named my-key-ring
# view your encryption keys named poc-key1 and poc-key2.
# Click on the key named poc-key1 ,Currently you only have one version.
# Click the EDIT ROTATION PERIOD button.
# Set the rotation period dropdown to 30 days.



# 9. Remove the Bucket and Its Contents
gsutil rm -r gs://$BUCKET


# 10. disable and destroy the two keys (each key has one version 1 which we gonna delete)
gcloud kms keys versions disable 1 \
    --keyring=my-key-ring \
    --location=us \
    --key=poc-key
gcloud kms keys versions disable 1 \
    --keyring=my-key-ring \
    --location=us \
    --key=poc-key2

gcloud kms keys versions destroy 1 \
    --keyring=my-key-ring \
    --location=us \
    --key=poc-key

gcloud kms keys versions destroy 1 \
    --keyring=my-key-ring \
    --location=us \
    --key=poc-key2





# 3- customer supplied encryption key


